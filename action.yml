name: 'ARM runner'
description: 'Composite action to run commands within a qemu chrooted environment'
inputs:
  base_image:
    description: 'System base image'
    required: true
    default: 'raspios_lite:2021-05-07'
  image_additional_mb:
    description: 'Additional MB for image'
    required: false
    default: 0
  cpu:
    description: 'CPU architecture, arm1176 for arm6vl (Pi Zero)'
    required: true
    default: 'arm1176'
  shell:
    description: 'Path to shell to run the commands with'
    required: false
    default: '/bin/sh'
  commands:
    description: 'Commands to run in the image, executed by the shell'
    required: true
    default: 'uname -a'
  exit_on_fail:
    description: 'Exit immediately if a command exits with a non-zero status'
    required: false
    default: 'yes'
  copy_artifact_path:
    description: 'Path of artifacts to copy, within the image'
    required: false
  copy_artifact_dest:
    description: 'Where to copy artifacts'
    required: false
    default: '.'
  copy_repository_path:
    description: 'Where to copy repository path'
    required: false
    default: ''
  optimize_image:
    description: 'Zero-fill unused filesystem blocks during final cleanup'
    required: false
    default: 'yes'
  use_systemd_nspawn:
    description: 'Use systemd-nspawn instead of chroot'
    required: false
    default: 'no'
  shell_package:
    description: 'The shell package to install, if different from shell'
    required: false
    default: ''
outputs:
  image:
    description: "Path to image"
    value: ${{ steps.download_image.outputs.image }}
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      run:
        sudo apt-get update && sudo apt-get install -y qemu qemu-user-static binfmt-support parted wget dosfstools zip
      shell: bash
    - name: Install qemu wrapper
      run: |
        sudo mv /usr/bin/qemu-arm-static /usr/bin/qemu-arm-static0
        sudo gcc -static ${{ github.action_path }}/qemu-wrapper.c -DQEMU_CPU=${{ inputs.cpu }} -O3 -s -o /usr/bin/qemu-arm-static
        sudo update-binfmts --disable qemu-arm
        sudo update-binfmts --enable qemu-arm
      shell: bash
    - name: Download base image
      run: |
        bash ${{ github.action_path }}/download_image.sh ${{ inputs.base_image }}
      shell: bash
      id: download_image
    - name: Mount and optionally resize image
      run: |
        sudo bash ${{ github.action_path }}/mount_image.sh ${{ steps.download_image.outputs.image }} ${{ inputs.image_additional_mb }}
      shell: bash
      id: mount_image
    - name: Run commands
      run: |
        set -x
        repository_path=${{ inputs.copy_repository_path }}
        if [ "${repository_path}x" = "x" ]; then
            repository_name=`basename ${{ github.workspace }}`
            repository_path=/${repository_name}
        fi
        case "${{ inputs.exit_on_fail }}" in
        yes|true)
            exit_on_fail='e'
        ;;
        no|false)
            exit_on_fail=''
        ;;
        esac
        shell="${{ inputs.shell }}"
        case "${shell}" in
        /*)
            shell=/bin/${shell}
        esac
        case "${{ inputs.shell_package }}" in
        bash|sh|'')
            :
        *)
            [ -x "${shell}" ] || sudo apt-get install -y "${shell_package:-${shell##*/}}"
        ;;
        esac
        sudo mkdir -p $(dirname ${{ steps.mount_image.outputs.mount }}${repository_path})
        sudo cp -Rp ${{ github.workspace }} ${{ steps.mount_image.outputs.mount }}${repository_path}
        sudo touch ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh
        sudo chmod o+wx ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh
        echo "#!${shell}" > ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh
        echo "set -${exit_on_fail}x" >> ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh
        echo "cd ${repository_path}" >> ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh
        cat >> ${{ steps.mount_image.outputs.mount }}/tmp/commands.sh <<"ARM_RUNNER_INPUT_COMMANDS_EOF"
        ${{ inputs.commands }}
        ARM_RUNNER_INPUT_COMMANDS_EOF
        if [ "${{ inputs.use_systemd_nspawn }}x" != "x" -a "${{ inputs.use_systemd_nspawn }}x" != "nox" ]; then
            sudo apt-get install -y systemd-container
            sudo systemd-nspawn -D ${{ steps.mount_image.outputs.mount }} /tmp/commands.sh
        else
            sudo chroot ${{ steps.mount_image.outputs.mount }} /tmp/commands.sh
        fi
      shell: bash
    - name: Copy artifacts within image
      run: |
        repository_path=${{ inputs.copy_repository_path }}
        if [ "${repository_path}x" = "x" ]; then
            repository_name=`basename ${{ github.workspace }}`
            repository_path=/${repository_name}
        fi
        if [ "${{ inputs.copy_artifact_path }}x" != "x" ] && [ "${{ inputs.copy_artifact_dest }}x" != "x" ]; then
            sudo cp -Rp ${{ steps.mount_image.outputs.mount }}${repository_path}/${{ inputs.copy_artifact_path }} ${{ inputs.copy_artifact_dest }}
        fi
      shell: bash
    - name: Cleanup image
      run: |
        sudo bash ${{ github.action_path }}/cleanup_image.sh ${{ steps.mount_image.outputs.loopdev }} ${{ steps.mount_image.outputs.mount }} "${{ inputs.optimize_image }}"
      shell: bash
branding:
  icon: 'cpu'
  color: 'purple'
